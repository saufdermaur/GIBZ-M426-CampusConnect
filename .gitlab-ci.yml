stages:
  - lint
  - build
  - deploy

variables:
  # Remove GitLab-specific variables
  CI_REGISTRY_IMAGE: "docker.io/snidlleit/campusconnect"

# Linting the backend code
lint_backend:
  stage: lint
  image: node:14
  script:
    - cd backend
    - npm install
  only:
    - testBrach_Sebastian

# Linting the frontend code
lint_frontend:
  stage: lint
  image: node:14
  script:
    - cd frontend
    - npm install
    - npm run lint
  only:
    - testBrach_Sebastian

# Prepare the backend for deployment
build_backend:
  stage: build
  image: node:14
  script:
    - cd backend
    - npm install
    - echo "DEV_DB_HOST=${DEV_DB_HOST}" >> .env
    - echo "DEV_DB_USER=${DEV_DB_USER}" >> .env
    - echo "DEV_DB_PASS=${DEV_DB_PASS}" >> .env
    - echo "DEV_DB_NAME=${DEV_DB_NAME}" >> .env
    - echo "DEV_DB_PORT=${DEV_DB_PORT}" >> .env
    - echo "JWT_SECRET=${JWT_SECRET}" >> .env
    - tar -czf backend.tar.gz *
  artifacts:
    paths:
      - backend/backend.tar.gz
  only:
    - testBrach_Sebastian

# Build the frontend code
build_frontend:
  stage: build
  image: node:14
  script:
    - cd frontend
    - npm install
    - echo "BASE_URL=${BASE_URL}" >> .env
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
  only:
    - testBrach_Sebastian

# Deploying the application to DockerHub
deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo 'snidlleit' | docker login --username 'snidlleit' --password-stdin <<< 'iP&K4$hJ!YPcGN6Gbp%uncNA%d#8qnCS'
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - testBrach_Sebastian
  environment:
    name: production
